-- vim: ft=haskell:

Pairs.$wpairs :: GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Int)] =
  \r [ww_s17c]
    case ># [1 ww_s17c] of sat_s17d {
      __DEFAULT ->
        case tagToEnum# [sat_s17d] of _ {
          GHC.Types.False ->
            let {
              go_s17f :: GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Int)] =
                \r [x_s17g]
                  case +# [x_s17g 1] of x0_s17h {
                    __DEFAULT ->
                      let {
                        n_s17i :: [(GHC.Types.Int, GHC.Types.Int)] =
                          \u []
                            case ==# [x_s17g ww_s17c] of sat_s17j {
                              __DEFAULT ->
                                case tagToEnum# [sat_s17j] of _ {
                                  GHC.Types.False ->
                                    case +# [x_s17g 1] of sat_s17l {
                                      __DEFAULT -> go_s17f sat_s17l;
                                    };
                                  GHC.Types.True -> [] [];
                                };
                            };
                      }
                      in case ># [x0_s17h ww_s17c] of sat_s17m {
                           __DEFAULT ->
                             case tagToEnum# [sat_s17m] of _ {
                               GHC.Types.False ->
                                 let { wild2_s17o :: GHC.Types.Int = GHC.Types.I#! [x_s17g]; }
                                 in let {
                                      go1_s17p :: GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Int)] =
                                        \r [x1_s17q]
                                          let {
                                            sat_s17w :: [(GHC.Types.Int, GHC.Types.Int)] =
                                              \u []
                                                case ==# [x1_s17q ww_s17c] of sat_s17t {
                                                  __DEFAULT ->
                                                    case tagToEnum# [sat_s17t] of _ {
                                                      GHC.Types.False ->
                                                        case +# [x1_s17q 1] of sat_s17v {
                                                          __DEFAULT -> go1_s17p sat_s17v;
                                                        };
                                                      GHC.Types.True -> n_s17i;
                                                    };
                                                };
                                          }
                                          in let { sat_s17r :: GHC.Types.Int = GHC.Types.I#! [x1_s17q]; }
                                             in let {
                                                  sat_s17s :: (GHC.Types.Int, GHC.Types.Int) = (,)! [wild2_s17o sat_s17r];
                                                }
                                                in : [sat_s17s sat_s17w];
                                    }
                                    in go1_s17p x0_s17h;
                               GHC.Types.True -> n_s17i;
                             };
                         };
                  };
            }
            in go_s17f 1;
          GHC.Types.True -> [] [];
        };
    };
Pairs.pairs :: GHC.Types.Int -> [(GHC.Types.Int, GHC.Types.Int)] =
  \r [w_s17x]
    case w_s17x of _ {
      GHC.Types.I# ww1_s17z -> Pairs.$wpairs ww1_s17z;
    };
Pairs.sumPairs1 :: (GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Int =
  \r [ds_s17A]
    case ds_s17A of _ {
      (,) a_s17C b_s17D -> GHC.Num.$fNumInt_$c+ a_s17C b_s17D;
    };
Pairs.sumPairs :: GHC.Types.Int -> GHC.Types.Int =
  \r [x_s17E]
    case x_s17E of _ {
      GHC.Types.I# ww1_s17G ->
        case Pairs.$wpairs ww1_s17G of sat_s17H {
          __DEFAULT ->
            case GHC.Base.map Pairs.sumPairs1 sat_s17H of sat_s17I {
              __DEFAULT -> Data.List.sum_$ssum1 sat_s17I;
            };
        };
    };
Pairs.nPairs :: GHC.Types.Int -> GHC.Types.Int =
  \r [x_s17J]
    case Pairs.pairs x_s17J of sat_s17K {
      __DEFAULT ->
        case GHC.List.$wlenAcc sat_s17K 0 of ww_s17L {
          __DEFAULT -> GHC.Types.I# [ww_s17L];
        };
    };
baseSums_r1yq :: GHC.Types.Int -> GHC.Types.Int =
  \r [x_s6hn]
    case x_s6hn of _ {
      GHC.Types.I# y_s6hp ->
        case ># [1 y_s6hp] of sat_s6hq {
          __DEFAULT ->
            case tagToEnum# [sat_s6hq] of _ {
              GHC.Types.False ->
                let {
                  go_s6hs GHC.Prim.Int# -> [GHC.Types.Int] =
                    \r [x1_s6ht]
                      case +# [x1_s6ht 1] of x0_s6hu {
                        __DEFAULT ->
                          let {
                            n_s6hv :: [GHC.Types.Int] =
                              \u []
                                case ==# [x1_s6ht y_s6hp] of sat_s6hw {
                                  __DEFAULT ->
                                    case tagToEnum# [sat_s6hw] of _ {
                                      GHC.Types.False ->
                                        case +# [x1_s6ht 1] of sat_s6hy {
                                          __DEFAULT -> go_s6hs sat_s6hy;
                                        };
                                      GHC.Types.True -> [] [];
                                    };
                                };
                          }
                          in case ># [x0_s6hu y_s6hp] of sat_s6hz {
                               __DEFAULT ->
                                 case tagToEnum# [sat_s6hz] of _ {
                                   GHC.Types.False ->
                                     let {
                                       go1_s6hB :: GHC.Prim.Int# -> [GHC.Types.Int] =
                                         \r [x2_s6hC]
                                           let {
                                             sat_s6hI :: [GHC.Types.Int] =
                                               \u []
                                                 case ==# [x2_s6hC y_s6hp] of sat_s6hF {
                                                   __DEFAULT ->
                                                     case tagToEnum# [sat_s6hF] of _ {
                                                       GHC.Types.False ->
                                                         case +# [x2_s6hC 1] of sat_s6hH {
                                                           __DEFAULT -> go1_s6hB sat_s6hH;
                                                         };
                                                       GHC.Types.True -> n_s6hv;
                                                     };
                                                 };
                                           }
                                           in case +# [x1_s6ht x2_s6hC] of sat_s6hD {
                                                __DEFAULT ->
                                                  let {
                                                    sat_s6hE :: GHC.Types.Int = GHC.Types.I#! [sat_s6hD];
                                                  }
                                                  in : [sat_s6hE sat_s6hI];
                                              };
                                     }
                                     in go1_s6hB x0_s6hu;
                                   GHC.Types.True -> n_s6hv;
                                 };
                             };
                      };
                }
                in case go_s6hs 1 of sat_s6hJ {
                     __DEFAULT -> Data.List.sum_$ssum1 sat_s6hJ;
                   };
              GHC.Types.True -> lvl_r6gy;
            };
        };
    };
